#!/usr/bin/env python3

import argparse, codecs, datetime, os, socket, sys, time # do not use any other imports/libraries
from urllib.parse import urlparse

# took x.y hours (please specify here how much time your solution required)

# parse arguments
parser = argparse.ArgumentParser(description='TLS v1.2 client')
parser.add_argument('url', type=str, help='URL to request')
parser.add_argument('--certificate', type=str, help='File to write PEM-encoded server certificate')
args = parser.parse_args()

def nb(i, length=False):
    # converts integer to bytes
    b = b''
    if length==False:
        length = (i.bit_length()+7)//8
    for _ in range(length):
        b = bytes([i & 0xff]) + b
        i >>= 8
    return b

def bn(b):
    # converts bytes to integer
    i = 0
    for char in b:
        i <<= 8
        i |= char
    return i

# returns TLS record that contains ClientHello Handshake message
def client_hello():

    print("--> ClientHello()")

    # list of cipher suites the client supports
    csuite = b"\x00\x05" # TLS_RSA_WITH_RC4_128_SHA
    csuite+= b"\x00\x2f" # TLS_RSA_WITH_AES_128_CBC_SHA
    csuite+= b"\x00\x35" # TLS_RSA_WITH_AES_256_CBC_SHA

    # add Handshake message header

    # add record layer header

    return record

# returns TLS record that contains 'Certificate unknown' fatal Alert message
def alert():
    print("--> Alert()")

    # add alert message

    # add record layer header

    return record

# parse TLS Handshake messages
def parsehandshake(r):
    global server_hello_done_received

    # read Handshake message type and length from message header

    if htype == 0x02:
        print("	<--- ServerHello()")

        print("	[+] server randomness:", server_random.hex().upper())
        print("	[+] server timestamp:", gmt)
        print("	[+] TLS session ID:", sessid.hex().upper())

        if cipher==b"\x00\x2f":
            print("	[+] Cipher suite: TLS_RSA_WITH_AES_128_CBC_SHA")
        elif cipher==b"\x00\x35":
            print("	[+] Cipher suite: TLS_RSA_WITH_AES_256_CBC_SHA")
        elif cipher==b"\x00\x05":
            print("	[+] Cipher suite: TLS_RSA_WITH_RC4_128_SHA")
        else:
            print("[-] Unsupported cipher suite selected:", cipher.hex())
            sys.exit(1)

        if compression!=0x00:
            print("[-] Wrong compression:", compression)
            sys.exit(1)

    elif htype == 0x0b:
        print("	<--- Certificate()")
        print("	[+] Server certificate length:", certlen)
        if args.certificate:
            print("	[+] Server certificate saved in:", args.certificate)
    elif htype == 0x0e:
        print("	<--- ServerHelloDone()")
    else:
        print("[-] Unknown Handshake type:", htype)
        sys.exit(1)

    # handle the case of several handshake messages in one record
    leftover = ...
    if len(leftover):
        parsehandshake(leftover)

# parses TLS record
def parserecord(r):

    # parse TLS record header and pass the record body to the corresponding parsing method (i.e., parsehandshake())

# read from the socket full TLS record
def readrecord():
    global s

    record = b""

    # read the TLS record header (5 bytes)

    # find data length

    # read the TLS record body

    return record

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
url = urlparse(args.url)
host = url.netloc.split(':')
if len(host) > 1:
    port = int(host[1])
else:
    port = 443
host = host[0]
path = url.path

s.connect((host, port))
s.send(client_hello())

server_hello_done_received = False
while not server_hello_done_received:
    parserecord(readrecord())
s.send(alert())

print("[+] Closing TCP connection!")
s.close()
